import { sanitize } from "dompurify";

// the List of countries
const countriesList: CountriesList =  
{
    AF: "Afghanistan ðŸ‡¦ðŸ‡«",
    AL: "Albania ðŸ‡¦ðŸ‡±",
    DZ: "Algeria ðŸ‡©ðŸ‡¿",
    AD: "Andorra ðŸ‡¦ðŸ‡©",
    AO: "Angola ðŸ‡¦ðŸ‡´",
    AG: "Antigua and Barbuda ðŸ‡¦ðŸ‡¬",
    AR: "Argentina ðŸ‡¦ðŸ‡·",
    AM: "Armenia ðŸ‡¦ðŸ‡²",
    AU: "Australia ðŸ‡¦ðŸ‡º",
    AT: "Austria ðŸ‡¦ðŸ‡¹",
    AZ: "Azerbaijan ðŸ‡¦ðŸ‡¿",
    BS: "Bahamas ðŸ‡§ðŸ‡¸",
    BH: "Bahrain ðŸ‡§ðŸ‡­",
    BD: "Bangladesh ðŸ‡§ðŸ‡©",
    BB: "Barbados ðŸ‡§ðŸ‡§",
    BY: "Belarus ðŸ‡§ðŸ‡¾",
    BE: "Belgium ðŸ‡§ðŸ‡ª",
    BZ: "Belize ðŸ‡§ðŸ‡¿",
    BJ: "Benin ðŸ‡§ðŸ‡¯",
    BT: "Bhutan ðŸ‡§ðŸ‡¹",
    BO: "Bolivia ðŸ‡§ðŸ‡´",
    BA: "Bosnia and Herzegovina ðŸ‡§ðŸ‡¦",
    BW: "Botswana ðŸ‡§ðŸ‡¼",
    BR: "Brazil ðŸ‡§ðŸ‡·",
    BN: "Brunei ðŸ‡§ðŸ‡³",
    BG: "Bulgaria ðŸ‡§ðŸ‡¬",
    BF: "Burkina Faso ðŸ‡§ðŸ‡«",
    BI: "Burundi ðŸ‡§ðŸ‡®",
    CV: "Cabo Verde ðŸ‡¨ðŸ‡»",
    KH: "Cambodia ðŸ‡°ðŸ‡­",
    CM: "Cameroon ðŸ‡¨ðŸ‡²",
    CA: "Canada ðŸ‡¨ðŸ‡¦",
    CF: "Central African Republic ðŸ‡¨ðŸ‡«",
    TD: "Chad ðŸ‡¹ðŸ‡©",
    CL: "Chile ðŸ‡¨ðŸ‡±",
    CN: "China ðŸ‡¨ðŸ‡³",
    CO: "Colombia ðŸ‡¨ðŸ‡´",
    KM: "Comoros ðŸ‡°ðŸ‡²",
    CG: "Congo ðŸ‡¨ðŸ‡¬",
    CR: "Costa Rica ðŸ‡¨ðŸ‡·",
    HR: "Croatia ðŸ‡­ðŸ‡·",
    CU: "Cuba ðŸ‡¨ðŸ‡º",
    CY: "Cyprus ðŸ‡¨ðŸ‡¾",
    CZ: "Czech Republic ðŸ‡¨ðŸ‡¿",
    DK: "Denmark ðŸ‡©ðŸ‡°",
    DJ: "Djibouti ðŸ‡©ðŸ‡¯",
    DM: "Dominica ðŸ‡©ðŸ‡²",
    DO: "Dominican Republic ðŸ‡©ðŸ‡´",
    EC: "Ecuador ðŸ‡ªðŸ‡¨",
    EG: "Egypt ðŸ‡ªðŸ‡¬",
    SV: "El Salvador ðŸ‡¸ðŸ‡»",
    GQ: "Equatorial Guinea ðŸ‡¬ðŸ‡¶",
    ER: "Eritrea ðŸ‡ªðŸ‡·",
    EE: "Estonia ðŸ‡ªðŸ‡ª",
    ET: "Ethiopia ðŸ‡ªðŸ‡¹",
    FJ: "Fiji ðŸ‡«ðŸ‡¯",
    FI: "Finland ðŸ‡«ðŸ‡®",
    FR: "France ðŸ‡«ðŸ‡·",
    GA: "Gabon ðŸ‡¬ðŸ‡¦",
    GM: "Gambia ðŸ‡¬ðŸ‡²",
    GE: "Georgia ðŸ‡¬ðŸ‡ª",
    DE: "Germany ðŸ‡©ðŸ‡ª",
    GH: "Ghana ðŸ‡¬ðŸ‡­",
    GR: "Greece ðŸ‡¬ðŸ‡·",
    GD: "Grenada ðŸ‡¬ðŸ‡©",
    GT: "Guatemala ðŸ‡¬ðŸ‡¹",
    GN: "Guinea ðŸ‡¬ðŸ‡³",
    GW: "Guinea-Bissau ðŸ‡¬ðŸ‡¼",
    GY: "Guyana ðŸ‡¬ðŸ‡¾",
    HT: "Haiti ðŸ‡­ðŸ‡¹",
    HN: "Honduras ðŸ‡­ðŸ‡³",
    HU: "Hungary ðŸ‡­ðŸ‡º",
    IS: "Iceland ðŸ‡®ðŸ‡¸",
    IN: "India ðŸ‡®ðŸ‡³",
    ID: "Indonesia ðŸ‡®ðŸ‡©",
    IR: "Iran ðŸ‡®ðŸ‡·",
    IQ: "Iraq ðŸ‡®ðŸ‡¶",
    IE: "Ireland ðŸ‡®ðŸ‡ª",
    IL: "Israel ðŸ‡®ðŸ‡±",
    IT: "Italy ðŸ‡®ðŸ‡¹",
    JM: "Jamaica ðŸ‡¯ðŸ‡²",
    JP: "Japan ðŸ‡¯ðŸ‡µ",
    JO: "Jordan ðŸ‡¯ðŸ‡´",
    KZ: "Kazakhstan ðŸ‡°ðŸ‡¿",
    KE: "Kenya ðŸ‡°ðŸ‡ª",
    KI: "Kiribati ðŸ‡°ðŸ‡®",
    KP: "North Korea ðŸ‡°ðŸ‡µ",
    KR: "South Korea ðŸ‡°ðŸ‡·",
    KW: "Kuwait ðŸ‡°ðŸ‡¼",
    KG: "Kyrgyzstan ðŸ‡°ðŸ‡¬",
    LA: "Laos ðŸ‡±ðŸ‡¦",
    LV: "Latvia ðŸ‡±ðŸ‡»",
    LB: "Lebanon ðŸ‡±ðŸ‡§",
    LS: "Lesotho ðŸ‡±ðŸ‡¸",
    LR: "Liberia ðŸ‡±ðŸ‡·",
    LY: "Libya ðŸ‡±ðŸ‡¾",
    LI: "Liechtenstein ðŸ‡±ðŸ‡®",
    LT: "Lithuania ðŸ‡±ðŸ‡¹",
    LU: "Luxembourg ðŸ‡±ðŸ‡º",
    MG: "Madagascar ðŸ‡²ðŸ‡¬",
    MW: "Malawi ðŸ‡²ðŸ‡¼",
    MY: "Malaysia ðŸ‡²ðŸ‡¾",
    MV: "Maldives ðŸ‡²ðŸ‡»",
    ML: "Mali ðŸ‡²ðŸ‡±",
    MT: "Malta ðŸ‡²ðŸ‡¹",
    MH: "Marshall Islands ðŸ‡²ðŸ‡­",
    MR: "Mauritania ðŸ‡²ðŸ‡·",
    MU: "Mauritius ðŸ‡²ðŸ‡º",
    MX: "Mexico ðŸ‡²ðŸ‡½",
    FM: "Micronesia ðŸ‡«ðŸ‡²",
    MD: "Moldova ðŸ‡²ðŸ‡©",
    MC: "Monaco ðŸ‡²ðŸ‡¨",
    MN: "Mongolia ðŸ‡²ðŸ‡³",
    ME: "Montenegro ðŸ‡²ðŸ‡ª",
    MA: "Morocco ðŸ‡²ðŸ‡¦",
    MZ: "Mozambique ðŸ‡²ðŸ‡¿",
    MM: "Myanmar ðŸ‡²ðŸ‡²",
    NA: "Namibia ðŸ‡³ðŸ‡¦",
    NR: "Nauru ðŸ‡³ðŸ‡·",
    NP: "Nepal ðŸ‡³ðŸ‡µ",
    NL: "Netherlands ðŸ‡³ðŸ‡±",
    NZ: "New Zealand ðŸ‡³ðŸ‡¿",
    NI: "Nicaragua ðŸ‡³ðŸ‡®",
    NE: "Niger ðŸ‡³ðŸ‡ª",
    NG: "Nigeria ðŸ‡³ðŸ‡¬",
    NO: "Norway ðŸ‡³ðŸ‡´",
    OM: "Oman ðŸ‡´ðŸ‡²",
    PK: "Pakistan ðŸ‡µðŸ‡°",
    PW: "Palau ðŸ‡µðŸ‡¼",
    PA: "Panama ðŸ‡µðŸ‡¦",
    PG: "Papua New Guinea ðŸ‡µðŸ‡¬",
    PY: "Paraguay ðŸ‡µðŸ‡¾",
    PE: "Peru ðŸ‡µðŸ‡ª",
    PH: "Philippines ðŸ‡µðŸ‡­",
    PL: "Poland ðŸ‡µðŸ‡±",
    PT: "Portugal ðŸ‡µðŸ‡¹",
    QA: "Qatar ðŸ‡¶ðŸ‡¦",
    RO: "Romania ðŸ‡·ðŸ‡´",
    RU: "Russia ðŸ‡·ðŸ‡º",
    RW: "Rwanda ðŸ‡·ðŸ‡¼",
    KN: "Saint Kitts and Nevis ðŸ‡°ðŸ‡³",
    LC: "Saint Lucia ðŸ‡±ðŸ‡¨",
    VC: "Saint Vincent and the Grenadines ðŸ‡»ðŸ‡¨",
    WS: "Samoa ðŸ‡¼ðŸ‡¸",
    SM: "San Marino ðŸ‡¸ðŸ‡²",
    ST: "Sao Tome and Principe ðŸ‡¸ðŸ‡¹",
    SA: "Saudi Arabia ðŸ‡¸ðŸ‡¦",
    SN: "Senegal ðŸ‡¸ðŸ‡³",
    RS: "Serbia ðŸ‡·ðŸ‡¸",
    SC: "Seychelles ðŸ‡¸ðŸ‡¨",
    SL: "Sierra Leone ðŸ‡¸ðŸ‡±",
    SG: "Singapore ðŸ‡¸ðŸ‡¬",
    SK: "Slovakia ðŸ‡¸ðŸ‡°",
    SI: "Slovenia ðŸ‡¸ðŸ‡®",
    SB: "Solomon Islands ðŸ‡¸ðŸ‡§",
    SO: "Somalia ðŸ‡¸ðŸ‡´",
    ZA: "South Africa ðŸ‡¿ðŸ‡¦",
    SS: "South Sudan ðŸ‡¸ðŸ‡¸",
    ES: "Spain ðŸ‡ªðŸ‡¸",
    LK: "Sri Lanka ðŸ‡±ðŸ‡°",
    SD: "Sudan ðŸ‡¸ðŸ‡©",
    SR: "Suriname ðŸ‡¸ðŸ‡·",
    SE: "Sweden ðŸ‡¸ðŸ‡ª",
    CH: "Switzerland ðŸ‡¨ðŸ‡­",
    SY: "Syria ðŸ‡¸ðŸ‡¾",
    TW: "Taiwan ðŸ‡¹ðŸ‡¼",
    TJ: "Tajikistan ðŸ‡¹ðŸ‡¯",
    TZ: "Tanzania ðŸ‡¹ðŸ‡¿",
    TH: "Thailand ðŸ‡¹ðŸ‡­",
    TL: "Timor-Leste ðŸ‡¹ðŸ‡±",
    TG: "Togo ðŸ‡¹ðŸ‡¬",
    TO: "Tonga ðŸ‡¹ðŸ‡´",
    TT: "Trinidad and Tobago ðŸ‡¹ðŸ‡¹",
    TN: "Tunisia ðŸ‡¹ðŸ‡³",
    TR: "Turkey ðŸ‡¹ðŸ‡·",
    TM: "Turkmenistan ðŸ‡¹ðŸ‡²",
    TV: "Tuvalu ðŸ‡¹ðŸ‡»",
    UG: "Uganda ðŸ‡ºðŸ‡¬",
    UA: "Ukraine ðŸ‡ºðŸ‡¦",
    AE: "United Arab Emirates ðŸ‡¦ðŸ‡ª",
    GB: "United Kingdom ðŸ‡¬ðŸ‡§",
    US: "United States ðŸ‡ºðŸ‡¸",
    UY: "Uruguay ðŸ‡ºðŸ‡¾",
    UZ: "Uzbekistan ðŸ‡ºðŸ‡¿",
    VU: "Vanuatu ðŸ‡»ðŸ‡º",
    VA: "Vatican City ðŸ‡»ðŸ‡¦",
    VE: "Venezuela ðŸ‡»ðŸ‡ª",
    VN: "Vietnam ðŸ‡»ðŸ‡³",
    YE: "Yemen ðŸ‡¾ðŸ‡ª",
    ZM: "Zambia ðŸ‡¿ðŸ‡²",
    ZW: "Zimbabwe ðŸ‡¿ðŸ‡¼"
};


// Type definition for validation rules
type ValidationRule = {
    regex: RegExp; 
    minLength: number; 
    maxLength: number;
};

// Type definition for the validation configuration, mapping field names to their corresponding validation rules
type ValidationConfig = {
    [key: string]: ValidationRule;
};

// Validation configuration object specifying rules for various input fields
const validationConfig: ValidationConfig = {
    city: {
        regex: /^(?!.*\s{3})(?!.*\b\w{13,}\b)[\p{L}\p{M}\s\-'Ã©Ã¨ÃªÃ«Ã Ã¡Ã¢Ã¤Ã£Ã¥Ã§Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¶Ã¹ÃºÃ»Ã¼Ã¿Ã½Ã¦Å“.,&]+$/u,
        minLength: 2,
        maxLength: 20,
    },
    beer: {
        regex: /^(?!.*\s{3})(?!.*\b\w{25,}\b)[\p{L}\p{M}0-9\s\-'Ã©Ã¨ÃªÃ«Ã Ã¡Ã¢Ã¤Ã£Ã¥Ã§Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¶Ã¹ÃºÃ»Ã¼Ã¿Ã½Ã¦Å“.,&]+$/u,
        minLength: 2,
        maxLength: 50,
    },
};


// Validates the length of the input string.
const validateLength = (input: string, minLength: number, maxLength: number): boolean => {
    const trimmedInput = input.trim(); // Remove leading and trailing whitespace
    return trimmedInput.length >= minLength && trimmedInput.length <= maxLength; // Check if length is within the allowed range
};


// Validates an input string against a given validation rule.
const validateInput = (input: string, rule: ValidationRule): boolean => {
    if (rule) {   
        // Validate the input using the regex and length constraints
        return rule.regex.test(input) && validateLength(input, rule.minLength, rule.maxLength);
    }
    return false; // Return false if no rule is provided
};


// Validates the temperature based on the unit (Celsius or Fahrenheit) and the value.
const validateTemperature = (unit: string, value: number): boolean => {
    if (Number.isNaN(value)) return false; // Check if the value is a valid number

    // Define min and max temperature limits based on the unit
    const min = unit === 'C' ? -70 : -100;
    const max = unit === 'C' ? 70 : 160;

    return value >= min && value <= max; 
};


// Object containing specific validation methods for different fields
const validators = {
    cityName: (name: string): boolean => validateInput(name, validationConfig.city),
    countryName: (name: string): boolean => Object.values(countriesList).includes(name.trim()),
    beerName: (name: string): boolean => validateInput(name, validationConfig.beer),
    temperature: (unit: 'C' | 'F', value: number): boolean => validateTemperature(unit, value),
    withSpacesRegex: (value: string): boolean => {
        const isValidProp = /^[\w-]+$/.test(value);
        if (!isValidProp) {
            throw new Error('Invalid item name prop: should only contain alphanumeric characters and hyphens.');
        }
        return isValidProp; // Return the validation result
    },
};

/** Toggles validation classes on an input element based on its validity.
* @returns {number} - 1 if valid, 0 if invalid.
*/
const toggleValidationClasses = (isValid: boolean, element: HTMLElement): number => {
    try {
        element.classList.toggle('is-invalid', !isValid); 
        element.classList.toggle('is-valid', isValid); 
        return isValid ? 1 : 0; 
    } catch (error) {
        console.error(element, error);
        return NaN;
    }
};

/**
 * @returns {object} - An object containing:
 *   - validationResult {number}: Product of the validation results of all form fields (1 if all valid, 0 if any invalid).
 *   - review {ReviewData}: Sanitized review data from the form.
 */
const formValidator = (form: HTMLFormElement): { validationResult: number, review: ReviewData } => {
    const {
        hoppinessRating,
        overallRating,
        maltinessRating,
        termsWasAccepted,
        country,
        city,
        beerType,
        temperatureUnit,
        temperature,
        reviewComment,
        _csrfToken,
    } = form;

    const review: ReviewData = {
        hoppinessRating: hoppinessRating.value,
        overallRating: overallRating.value,
        maltinessRating: maltinessRating.value,
        termsWasAccepted: termsWasAccepted.checked,
        countryName: sanitize(country.value),
        cityName: sanitize(city.value),
        beerType: sanitize(beerType.value),
        comment: sanitize(reviewComment.value),
        temperatureUnit: temperatureUnit.value,
        temperature: parseFloat(temperature.value),
        _csrfToken: _csrfToken.value 
    };

    const validations = [
        toggleValidationClasses(review.hoppinessRating > 0, hoppinessRating[0]),
        toggleValidationClasses(review.overallRating > 0, overallRating[0]),
        toggleValidationClasses(review.maltinessRating > 0, maltinessRating[0]),
        toggleValidationClasses(review.termsWasAccepted, termsWasAccepted),
        toggleValidationClasses(validators.countryName(review.countryName), country),
        toggleValidationClasses(validators.cityName(review.cityName), city),
        toggleValidationClasses(validators.beerName(review.beerType), beerType),
        toggleValidationClasses(validators.temperature(review.temperatureUnit, review.temperature), temperature)
    ];

    const validationResult = validations.reduce((acc, curr) => acc * curr, 1);

    return { validationResult, review };
};



export { validators, toggleValidationClasses, formValidator, countriesList };
